<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qiuxs.movie.dao.MovieGetWayDao"><!--dsName="" saasAspect=""-->
	<!-- <cache readOnly="true"/> -->
	<!-- 启用Redis缓存时去除下方注释 -->
	<!-- <cache eviction="LRU" type="com.qiuxs.tech.mybatis.cache.MybatisRedisCache" readOnly="true" /> -->
    <sql id="allFields">
		`id`,
		`movie_id` as movieId,
		`type_id` as typeId,
		`target`,
		`flag`,
		`created_date` as createdDate,
		`created_by` as createdBy,
		`updated_date` as updatedDate,
		`updated_by` as updatedBy
    </sql>
    
	<sql id="insertFields">
		`id`,
		`movie_id`,
		`type_id`,
		`target`,
		`flag`,
		`created_date`,
		`created_by`,
		`updated_date`,
		`updated_by`
    </sql>
	
	<insert id="create" parameterType="com.qiuxs.movie.entity.MovieGetWay">
		insert into movie_get_way (<include refid="insertFields"/>)
		values (
			#{id},
			#{movieId},
			#{typeId},
			#{target},
			#{flag},
			#{createdDate},
			#{createdBy},
			#{updatedDate},
			#{updatedBy}
		)
	</insert>
	
	<insert id="createInBatch" parameterType="com.qiuxs.movie.entity.MovieGetWay">
		insert into movie_get_way (<include refid="insertFields"/>) values 
		<foreach collection="list" item="item" index="index" separator=",">
			(
				#{item.id},
				#{item.movieId},
				#{item.typeId},
				#{item.target},
				#{item.flag},
				#{item.createdDate},
				#{item.createdBy},
				#{item.updatedDate},
				#{item.updatedBy}
			)
		</foreach>
	</insert>   		
	
    <sql id="whereClause">
		<if test="movieId != null">
			and `movie_id` = #{movieId}			
		</if>
		<if test="typeId != null">
			and `type_id` = #{typeId}			
		</if>
		<if test='target != null and target != ""'>
			and `target` = #{target}			
		</if>
		<if test="flag != null">
			and `flag` = #{flag}			
		</if>
		<if test="flagGte != null">
			and `flag` &gt;= #{flagGte}
		</if>
		<if test="flagGt != null">
			and `flag` &gt; #{flagGt}
		</if>
		<if test="flagLte != null">
			and `flag` &lt;= #{flagLte}
		</if>
		<if test="flagLt != null">
			and `flag` &lt; #{flagLt}
		</if>
		<if test="createdDate != null">
			and `created_date` &gt;= #{createdDate}
			<!--and `created_date` &lt;= #{createdDate_fan1} -->
		</if>
		<if test="createdBy != null">
			and `created_by` = #{createdBy}			
		</if>
		<if test="updatedDate != null">
			and `updated_date` = #{updatedDate}			
		</if>
		<if test="updatedBy != null">
			and `updated_by` = #{updatedBy}			
		</if>
	</sql>
    
	<select id="get" resultType="com.qiuxs.movie.entity.MovieGetWay" parameterType="Long" >
		select <include refid="allFields"/> 
		  from movie_get_way 
		 where id = #{id} 
	</select>
	
	<select id="getByIds" parameterType="List" resultType="com.qiuxs.movie.entity.MovieGetWay">
		select <include refid="allFields"/> from movie_get_way 
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</select>
		
	<select id="getAll" resultType="com.qiuxs.movie.entity.MovieGetWay">
		select <include refid="allFields"/> 
		from movie_get_way 
	</select>

	<select id="count" resultType="long">
		select count(*) from movie_get_way 
	</select>
	
	<select id="getCountByWhere" parameterType="Map" resultType="Long">
		select count(*) from movie_get_way 
		<where>
		    <include refid="whereClause"/>
		</where>
	</select>

	<select id="findByWhere" parameterType="Map" resultType="com.qiuxs.movie.entity.MovieGetWay">
		select <include refid="allFields"/>
		from movie_get_way 
		<where>
		    <include refid="whereClause"/>
		</where>				
		<if test="orderBy != null">
			ORDER BY ${orderBy}
			<if test="orderByDesc != null and orderByDesc == 'true'">
				desc
			</if>
		</if>
	</select>
	
	<sql id="setComn">		
		<if test="movieId != null">
			`movie_id` = #{movieId},
		</if>
		<if test="typeId != null">
			`type_id` = #{typeId},
		</if>
		<if test="target != null">
			`target` = #{target},
		</if>
		<if test="flag != null">
			`flag` = #{flag},
		</if>
		<if test="createdDate != null">
			`created_date` = #{createdDate},
		</if>
		<if test="createdBy != null">
			`created_by` = #{createdBy},
		</if>
		<if test="updatedDate != null">
			`updated_date` = #{updatedDate},
		</if>
		<if test="updatedBy != null">
			`updated_by` = #{updatedBy}
		</if>
	</sql>
	
	<update id="update" parameterType="com.qiuxs.movie.entity.MovieGetWay">
		 update movie_get_way 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	<update id="updateByMap" parameterType="Map">
		 update movie_get_way 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	
	<delete id="delete">
		delete from movie_get_way where id = #{id}
	</delete>
	
	<delete id="multiDelete" parameterType="List">
		delete from movie_get_way
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<delete id="deleteByWhere" parameterType="Map">
		delete from movie_get_way 
		<where>
		    <include refid="whereClause"/>
		</where>
	</delete>	
	
</mapper>    
